package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;
import hello.Book;
import hello.BookRepository;

import java.util.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private BookRepository bookRepository;

	//Invoke upon "Sign Up", return JSON String
    //Input: username, password
    //Output: If success, new User class in JSON. If fail, empty User class in JSON
    //FAIL CASE: The new User's username already existed in the database
	@GetMapping(path="/addUser")
	public @ResponseBody String addNewUser (@RequestParam String username
			, @RequestParam String password, @RequestParam double longitude
			, @RequestParam double latitude) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User userToAdd = new User();
		userToAdd.setUsername(username);
		userToAdd.setPassword(password);
		userRepository.save(userToAdd);
		return "Saved";
	}
	
	@GetMapping(path="/addBook") 
	public @ResponseBody String addNewBook (@RequestParam int ownerID
			, @RequestParam String author, @RequestParam int rating, @RequestParam String title
			, @RequestParam String picture, @RequestParam double longitude, @RequestParam double latitude) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
// 		Book bookToAdd = new Book(bookID, ownerID, author, rating, title, picture, longitude, latitude);
		Book bookToAdd = new Book();
		bookToAdd.setAuthor(author);
		bookToAdd.setRating(rating);
		bookToAdd.setTitle(title);
		bookToAdd.setPicture(picture);
		bookToAdd.setLongitude(longitude);
		bookToAdd.setLatitude(latitude);
		bookRepository.save(bookToAdd);
		return "Saved";
	}

	@GetMapping(path="/allUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/allBooks")
	public @ResponseBody Iterable<Book> getAllBooks() {
		
		return bookRepository.findAll() == null ? null : bookRepository.findAll();
	}
	
	@GetMapping(path="/getUser")
	public @ResponseBody User getUser(@RequestParam String username, @RequestParam String password) {
		return userRepository.findByUsernameAndPassword(username, password);
	}
	
	//Invoke upon "Login", return a jsonfied user class if success		
		//Input: username, password
		//Output: If Success, return the whole User class in JSON. If fail, return empty User class in JSON
		//FAIL CASE: username doesn't exist OR password doesn't match with the username.
	@GetMapping(path="/verifyUser")
	public @ResponseBody User verifyUser(@RequestParam String username, @RequestParam String password
		, @RequestParam double longitude, @RequestParam double latitude) {
		User userToVerify = userRepository.findByUsernameAndPassword(username, password);
		if(userToVerify != null) {
			userToVerify.setLongitude(longitude);
			userToVerify.setLatitude(latitude);
			userRepository.save(userToVerify);
		}
		return userToVerify;
	}
	
	//TODO: update user location simply by user Id
	
	@GetMapping(path="/updateUserBookLocations")
	public @ResponseBody String updateUserBookLocations(@RequestParam int userID
	, @RequestParam double longitude, @RequestParam double latitude) {
		List<Book> userBooks = bookRepository.findByOwnerID(userID);
		if(userBooks == null) {
			return "User's books not found";
		}
		for(Book book : userBooks) {
			book.setLatitude(latitude);
			book.setLongitude(longitude);
			bookRepository.save(book);
			System.out.println("updating books");	
		}
		System.out.println("number of books: " + userBooks.size());
		return "User's books updated";
	}
}